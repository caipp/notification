// Code generated by MockGen. DO NOT EDIT.
// Source: notification.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	pb "openpitrix.io/notification/pkg/pb"
	reflect "reflect"
)

// MockNotificationClient is a mock of NotificationClient interface
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockNotificationClient) SayHello(ctx context.Context, in *pb.HelloRequest, opts ...grpc.CallOption) (*pb.HelloReply, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*pb.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockNotificationClientMockRecorder) SayHello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockNotificationClient)(nil).SayHello), varargs...)
}

// CreateNfWUserFilter mocks base method
func (m *MockNotificationClient) CreateNfWUserFilter(ctx context.Context, in *pb.CreateNfWUserFilterRequest, opts ...grpc.CallOption) (*pb.CreateNfResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNfWUserFilter", varargs...)
	ret0, _ := ret[0].(*pb.CreateNfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfWUserFilter indicates an expected call of CreateNfWUserFilter
func (mr *MockNotificationClientMockRecorder) CreateNfWUserFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfWUserFilter", reflect.TypeOf((*MockNotificationClient)(nil).CreateNfWUserFilter), varargs...)
}

// CreateNfWAppFilter mocks base method
func (m *MockNotificationClient) CreateNfWAppFilter(ctx context.Context, in *pb.CreateNfWAppFilterRequest, opts ...grpc.CallOption) (*pb.CreateNfResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNfWAppFilter", varargs...)
	ret0, _ := ret[0].(*pb.CreateNfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfWAppFilter indicates an expected call of CreateNfWAppFilter
func (mr *MockNotificationClientMockRecorder) CreateNfWAppFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfWAppFilter", reflect.TypeOf((*MockNotificationClient)(nil).CreateNfWAppFilter), varargs...)
}

// CreateNfWaddrs mocks base method
func (m *MockNotificationClient) CreateNfWaddrs(ctx context.Context, in *pb.CreateNfWaddrsRequest, opts ...grpc.CallOption) (*pb.CreateNfResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNfWaddrs", varargs...)
	ret0, _ := ret[0].(*pb.CreateNfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfWaddrs indicates an expected call of CreateNfWaddrs
func (mr *MockNotificationClientMockRecorder) CreateNfWaddrs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfWaddrs", reflect.TypeOf((*MockNotificationClient)(nil).CreateNfWaddrs), varargs...)
}

// DescribeNfs mocks base method
func (m *MockNotificationClient) DescribeNfs(ctx context.Context, in *pb.DescribeNfsRequest, opts ...grpc.CallOption) (*pb.DescribeNfsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNfs", varargs...)
	ret0, _ := ret[0].(*pb.DescribeNfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNfs indicates an expected call of DescribeNfs
func (mr *MockNotificationClientMockRecorder) DescribeNfs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNfs", reflect.TypeOf((*MockNotificationClient)(nil).DescribeNfs), varargs...)
}

// DescribeUserNfs mocks base method
func (m *MockNotificationClient) DescribeUserNfs(ctx context.Context, in *pb.DescribeNfsRequest, opts ...grpc.CallOption) (*pb.DescribeNfsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserNfs", varargs...)
	ret0, _ := ret[0].(*pb.DescribeNfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserNfs indicates an expected call of DescribeUserNfs
func (mr *MockNotificationClientMockRecorder) DescribeUserNfs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserNfs", reflect.TypeOf((*MockNotificationClient)(nil).DescribeUserNfs), varargs...)
}

// MockNotificationServer is a mock of NotificationServer interface
type MockNotificationServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServerMockRecorder
}

// MockNotificationServerMockRecorder is the mock recorder for MockNotificationServer
type MockNotificationServerMockRecorder struct {
	mock *MockNotificationServer
}

// NewMockNotificationServer creates a new mock instance
func NewMockNotificationServer(ctrl *gomock.Controller) *MockNotificationServer {
	mock := &MockNotificationServer{ctrl: ctrl}
	mock.recorder = &MockNotificationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationServer) EXPECT() *MockNotificationServerMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockNotificationServer) SayHello(arg0 context.Context, arg1 *pb.HelloRequest) (*pb.HelloReply, error) {
	ret := m.ctrl.Call(m, "SayHello", arg0, arg1)
	ret0, _ := ret[0].(*pb.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockNotificationServerMockRecorder) SayHello(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockNotificationServer)(nil).SayHello), arg0, arg1)
}

// CreateNfWUserFilter mocks base method
func (m *MockNotificationServer) CreateNfWUserFilter(arg0 context.Context, arg1 *pb.CreateNfWUserFilterRequest) (*pb.CreateNfResponse, error) {
	ret := m.ctrl.Call(m, "CreateNfWUserFilter", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateNfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfWUserFilter indicates an expected call of CreateNfWUserFilter
func (mr *MockNotificationServerMockRecorder) CreateNfWUserFilter(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfWUserFilter", reflect.TypeOf((*MockNotificationServer)(nil).CreateNfWUserFilter), arg0, arg1)
}

// CreateNfWAppFilter mocks base method
func (m *MockNotificationServer) CreateNfWAppFilter(arg0 context.Context, arg1 *pb.CreateNfWAppFilterRequest) (*pb.CreateNfResponse, error) {
	ret := m.ctrl.Call(m, "CreateNfWAppFilter", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateNfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfWAppFilter indicates an expected call of CreateNfWAppFilter
func (mr *MockNotificationServerMockRecorder) CreateNfWAppFilter(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfWAppFilter", reflect.TypeOf((*MockNotificationServer)(nil).CreateNfWAppFilter), arg0, arg1)
}

// CreateNfWaddrs mocks base method
func (m *MockNotificationServer) CreateNfWaddrs(arg0 context.Context, arg1 *pb.CreateNfWaddrsRequest) (*pb.CreateNfResponse, error) {
	ret := m.ctrl.Call(m, "CreateNfWaddrs", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateNfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfWaddrs indicates an expected call of CreateNfWaddrs
func (mr *MockNotificationServerMockRecorder) CreateNfWaddrs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfWaddrs", reflect.TypeOf((*MockNotificationServer)(nil).CreateNfWaddrs), arg0, arg1)
}

// DescribeNfs mocks base method
func (m *MockNotificationServer) DescribeNfs(arg0 context.Context, arg1 *pb.DescribeNfsRequest) (*pb.DescribeNfsResponse, error) {
	ret := m.ctrl.Call(m, "DescribeNfs", arg0, arg1)
	ret0, _ := ret[0].(*pb.DescribeNfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNfs indicates an expected call of DescribeNfs
func (mr *MockNotificationServerMockRecorder) DescribeNfs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNfs", reflect.TypeOf((*MockNotificationServer)(nil).DescribeNfs), arg0, arg1)
}

// DescribeUserNfs mocks base method
func (m *MockNotificationServer) DescribeUserNfs(arg0 context.Context, arg1 *pb.DescribeNfsRequest) (*pb.DescribeNfsResponse, error) {
	ret := m.ctrl.Call(m, "DescribeUserNfs", arg0, arg1)
	ret0, _ := ret[0].(*pb.DescribeNfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserNfs indicates an expected call of DescribeUserNfs
func (mr *MockNotificationServerMockRecorder) DescribeUserNfs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserNfs", reflect.TypeOf((*MockNotificationServer)(nil).DescribeUserNfs), arg0, arg1)
}
